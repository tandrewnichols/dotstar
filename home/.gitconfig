[user]
	name = Andrew Nichols
  email = tandrewnichols@gmail.com
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[alias]
  dt = difftool
  a = add --all :/
  co = checkout
  ci = commit
  commti = commit
  commmit = commit
  cp = cherry-pick
  df = diff --color-words=.
  amend = commit -a --amend --no-edit
  ammend = commit -a --amend --no-edit
  unstage = reset
  aliases = config --get-regexp ^alias\\.
  alias = "!f() { git config --global alias.\"$@\"; }; f"
  nuke = !git clean -fd :/ && git reset --hard
  edit = config --global -e
  rename = branch -m
  br = checkout -b
  l = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --numstat
  lsd = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --date=short
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --date=relative
  file = log -u
  find = !git ls-files | grep -i
  ours = "!f() { git co --ours $@ && git add $@; }; f"
  mine = "!f() { git co --ours $@ && git add $@; }; f"
  theirs = "!f() { git co --theirs $@ && git add $@; }; f"
  arc = "!f() { git tag archive/$1 $1 && git branch -D $1;}; f"
  archived = !git tag --list | grep archive
  d = branch -D
  rpo = remote prune origin
  cached = diff --cached
  staged = diff --cached
  pop = stash pop
  save = stash save -u
  drop = stash drop
  list = stash list
  grab = stash apply
  ap = stash apply
  wip = stash save -u "wip"
  wips = !git stash list | grep wip
  stashit = stash push
  nana = "!f(){ i=`git list | grep wip | head -1 | cut -f1 -d:`; git stash apply $i; git stash drop $i; }; f"
  whatsin = stash show -p
  chunk = add -p
  du = !git status --porcelain | grep \"^DU\" | sed s/^...// | xargs git rm
  conflict = !git st | grep -P '^[A-Z]{2}'
  resolve = !vim `git conflict | sed s/^...//` -p
  dirty = !cd ${GIT_PREFIX:-.} && vim `git ls-files -m` -p
  st = status -s
  undo = "!f() { git revert $1 -m 1; }; f"
  oops = "!f() { gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' ); }; f"
  ls = ls-tree -r --name-only
  unpush = "!f() { git push origin :$1 --no-verify; }; f"
  wat = "!git log `git_default_branch`..`git name`"
  name = rev-parse --abbrev-ref HEAD
  repo = "!f() { remote=`git config --get remote.origin.url`;remote=${remote##ssh://} remote=${remote#*:}; remote=${remote#[0-9][0-9][0-9][0-9]/}; remote=${remote%.git}; echo $remote; }; f"
  url = "!f() { remote=`git config --get remote.origin.url`; remote=${remote##ssh://}; remote=${remote/:[0-9][0-9][0-9][0-9]}; remote=${remote/://}; remote=${remote/git@/https://}; remote=${remote%.git}; echo $remote; }; f"
  open = "!f() { open `git url`; }; f"
  p = "!f() { if [[ -n `git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)` ]]; then git push; else git push -u origin `git name`; fi; }; f"
  root = rev-parse --show-toplevel
  pkg = "!f() { rm `git root`/package-lock.json; npm i --package-lock-only; }; f"
  review = "!f() { dir=`pwd`; cd `git root`; git checkout -b `git name`-review; rm -rf node_modules; git fetch origin `git_default_branch`; git co FETCH_HEAD -- node_modules; git a; git commit -m \"Remove node_modules for review\"; git push -u origin `git name`; cd $dir; open https://github.com/`git repo`/compare/`git name`?expand=1; }; f"
  message = "!f() { rev=$(git rev-parse stash@{$1}) && git drop $1 || exit 1 ; git stash store -m \"$2\" $rev; }; f"
  cam = commit -am
  head = show HEAD
  bs = branch-select
  when = log -1 --format=%ai
  latest = describe --tags --abbrev=0
  has = "!f() { git branch --contains tags/$1; }; f"
  bump = commit --allow-empty -m "Bump"
[push]
  default = upstream
[branch]
  autosetuprebase = never
[color]
  ui = auto
[core]
  excludesfile = ~/.gitignore
  autocrlf = input
	ignorecase = true
[merge]
  renamelimit = 7248
[clean]
  requireForce = false
[url "git@bitbucket.org:"]
	insteadOf = https://bitbucket.org/
[pull]
	rebase = false
[url "git@github-ht:hometownticketing/"]
  insteadOf = git@github.com:hometownticketing/
